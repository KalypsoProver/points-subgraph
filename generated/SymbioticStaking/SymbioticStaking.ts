// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AmountToLockSet extends ethereum.Event {
  get params(): AmountToLockSet__Params {
    return new AmountToLockSet__Params(this);
  }
}

export class AmountToLockSet__Params {
  _event: AmountToLockSet;

  constructor(event: AmountToLockSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class AttestationVerifierSet extends ethereum.Event {
  get params(): AttestationVerifierSet__Params {
    return new AttestationVerifierSet__Params(this);
  }
}

export class AttestationVerifierSet__Params {
  _event: AttestationVerifierSet;

  constructor(event: AttestationVerifierSet) {
    this._event = event;
  }

  get attestationVerifier(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class BaseTransmitterComissionRateSet extends ethereum.Event {
  get params(): BaseTransmitterComissionRateSet__Params {
    return new BaseTransmitterComissionRateSet__Params(this);
  }
}

export class BaseTransmitterComissionRateSet__Params {
  _event: BaseTransmitterComissionRateSet;

  constructor(event: BaseTransmitterComissionRateSet) {
    this._event = event;
  }

  get rate(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class EnclaveImageAdded extends ethereum.Event {
  get params(): EnclaveImageAdded__Params {
    return new EnclaveImageAdded__Params(this);
  }
}

export class EnclaveImageAdded__Params {
  _event: EnclaveImageAdded;

  constructor(event: EnclaveImageAdded) {
    this._event = event;
  }

  get imageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get PCR0(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get PCR1(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get PCR2(): Bytes {
    return this._event.parameters[3].value.toBytes();
  }
}

export class EnclaveImageRemoved extends ethereum.Event {
  get params(): EnclaveImageRemoved__Params {
    return new EnclaveImageRemoved__Params(this);
  }
}

export class EnclaveImageRemoved__Params {
  _event: EnclaveImageRemoved;

  constructor(event: EnclaveImageRemoved) {
    this._event = event;
  }

  get imageId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class FeeRewardTokenSet extends ethereum.Event {
  get params(): FeeRewardTokenSet__Params {
    return new FeeRewardTokenSet__Params(this);
  }
}

export class FeeRewardTokenSet__Params {
  _event: FeeRewardTokenSet;

  constructor(event: FeeRewardTokenSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class JobSlashed extends ethereum.Event {
  get params(): JobSlashed__Params {
    return new JobSlashed__Params(this);
  }
}

export class JobSlashed__Params {
  _event: JobSlashed;

  constructor(event: JobSlashed) {
    this._event = event;
  }

  get jobId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProofMarketplaceSet extends ethereum.Event {
  get params(): ProofMarketplaceSet__Params {
    return new ProofMarketplaceSet__Params(this);
  }
}

export class ProofMarketplaceSet__Params {
  _event: ProofMarketplaceSet;

  constructor(event: ProofMarketplaceSet) {
    this._event = event;
  }

  get proofMarketplace(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RewardDistributorSet extends ethereum.Event {
  get params(): RewardDistributorSet__Params {
    return new RewardDistributorSet__Params(this);
  }
}

export class RewardDistributorSet__Params {
  _event: RewardDistributorSet;

  constructor(event: RewardDistributorSet) {
    this._event = event;
  }

  get rewardDistributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class SlashResultSubmitted extends ethereum.Event {
  get params(): SlashResultSubmitted__Params {
    return new SlashResultSubmitted__Params(this);
  }
}

export class SlashResultSubmitted__Params {
  _event: SlashResultSubmitted;

  constructor(event: SlashResultSubmitted) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get captureTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get numOfTxs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get imageId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get slashResultData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get proof(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class SnapshotConfirmed extends ethereum.Event {
  get params(): SnapshotConfirmed__Params {
    return new SnapshotConfirmed__Params(this);
  }
}

export class SnapshotConfirmed__Params {
  _event: SnapshotConfirmed;

  constructor(event: SnapshotConfirmed) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get confirmedTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeLocked extends ethereum.Event {
  get params(): StakeLocked__Params {
    return new StakeLocked__Params(this);
  }
}

export class StakeLocked__Params {
  _event: StakeLocked;

  constructor(event: StakeLocked) {
    this._event = event;
  }

  get jobId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakeTokenAdded extends ethereum.Event {
  get params(): StakeTokenAdded__Params {
    return new StakeTokenAdded__Params(this);
  }
}

export class StakeTokenAdded__Params {
  _event: StakeTokenAdded;

  constructor(event: StakeTokenAdded) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeTokenRemoved extends ethereum.Event {
  get params(): StakeTokenRemoved__Params {
    return new StakeTokenRemoved__Params(this);
  }
}

export class StakeTokenRemoved__Params {
  _event: StakeTokenRemoved;

  constructor(event: StakeTokenRemoved) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class StakeTokenSelectionWeightSet extends ethereum.Event {
  get params(): StakeTokenSelectionWeightSet__Params {
    return new StakeTokenSelectionWeightSet__Params(this);
  }
}

export class StakeTokenSelectionWeightSet__Params {
  _event: StakeTokenSelectionWeightSet;

  constructor(event: StakeTokenSelectionWeightSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get weight(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class StakeUnlocked extends ethereum.Event {
  get params(): StakeUnlocked__Params {
    return new StakeUnlocked__Params(this);
  }
}

export class StakeUnlocked__Params {
  _event: StakeUnlocked;

  constructor(event: StakeUnlocked) {
    this._event = event;
  }

  get jobId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakingManagerSet extends ethereum.Event {
  get params(): StakingManagerSet__Params {
    return new StakingManagerSet__Params(this);
  }
}

export class StakingManagerSet__Params {
  _event: StakingManagerSet;

  constructor(event: StakingManagerSet) {
    this._event = event;
  }

  get stakingManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class SubmissionCooldownSet extends ethereum.Event {
  get params(): SubmissionCooldownSet__Params {
    return new SubmissionCooldownSet__Params(this);
  }
}

export class SubmissionCooldownSet__Params {
  _event: SubmissionCooldownSet;

  constructor(event: SubmissionCooldownSet) {
    this._event = event;
  }

  get cooldown(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VaultSnapshotSubmitted extends ethereum.Event {
  get params(): VaultSnapshotSubmitted__Params {
    return new VaultSnapshotSubmitted__Params(this);
  }
}

export class VaultSnapshotSubmitted__Params {
  _event: VaultSnapshotSubmitted;

  constructor(event: VaultSnapshotSubmitted) {
    this._event = event;
  }

  get transmitter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get captureTimestamp(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get index(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get numOfTxs(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get imageId(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get vaultSnapshotData(): Bytes {
    return this._event.parameters[5].value.toBytes();
  }

  get proof(): Bytes {
    return this._event.parameters[6].value.toBytes();
  }
}

export class SymbioticStaking__confirmedTimestampInfoResultValue0Struct extends ethereum.Tuple {
  get captureTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get transmitter(): Address {
    return this[1].toAddress();
  }

  get transmitterComissionRate(): BigInt {
    return this[2].toBigInt();
  }
}

export class SymbioticStaking__confirmedTimestampsResult {
  value0: BigInt;
  value1: Address;
  value2: BigInt;

  constructor(value0: BigInt, value1: Address, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getCaptureTimestamp(): BigInt {
    return this.value0;
  }

  getTransmitter(): Address {
    return this.value1;
  }

  getTransmitterComissionRate(): BigInt {
    return this.value2;
  }
}

export class SymbioticStaking__enclaveImagesResult {
  value0: Bytes;
  value1: Bytes;
  value2: Bytes;

  constructor(value0: Bytes, value1: Bytes, value2: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBytes(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    map.set("value2", ethereum.Value.fromBytes(this.value2));
    return map;
  }

  getPCR0(): Bytes {
    return this.value0;
  }

  getPCR1(): Bytes {
    return this.value1;
  }

  getPCR2(): Bytes {
    return this.value2;
  }
}

export class SymbioticStaking__getStakeTokenWeightsResult {
  value0: Array<Address>;
  value1: Array<BigInt>;

  constructor(value0: Array<Address>, value1: Array<BigInt>) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigIntArray(this.value1));
    return map;
  }

  getValue0(): Array<Address> {
    return this.value0;
  }

  getValue1(): Array<BigInt> {
    return this.value1;
  }
}

export class SymbioticStaking__latestConfirmedTimestampInfoResultValue0Struct extends ethereum.Tuple {
  get captureTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get transmitter(): Address {
    return this[1].toAddress();
  }

  get transmitterComissionRate(): BigInt {
    return this[2].toBigInt();
  }
}

export class SymbioticStaking__lockInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStakeToken(): Address {
    return this.value0;
  }

  getAmount(): BigInt {
    return this.value1;
  }
}

export class SymbioticStaking__txCountInfoResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getIdxToSubmit(): BigInt {
    return this.value0;
  }

  getNumOfTxs(): BigInt {
    return this.value1;
  }
}

export class SymbioticStaking extends ethereum.SmartContract {
  static bind(address: Address): SymbioticStaking {
    return new SymbioticStaking("SymbioticStaking", address);
  }

  BRIDGE_ENCLAVE_UPDATES_ROLE(): Bytes {
    let result = super.call(
      "BRIDGE_ENCLAVE_UPDATES_ROLE",
      "BRIDGE_ENCLAVE_UPDATES_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_BRIDGE_ENCLAVE_UPDATES_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "BRIDGE_ENCLAVE_UPDATES_ROLE",
      "BRIDGE_ENCLAVE_UPDATES_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  COMPLETE_MASK(): Bytes {
    let result = super.call("COMPLETE_MASK", "COMPLETE_MASK():(bytes32)", []);

    return result[0].toBytes();
  }

  try_COMPLETE_MASK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "COMPLETE_MASK",
      "COMPLETE_MASK():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  I_GENERATOR_CALLBACK(): Address {
    let result = super.call(
      "I_GENERATOR_CALLBACK",
      "I_GENERATOR_CALLBACK():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_I_GENERATOR_CALLBACK(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "I_GENERATOR_CALLBACK",
      "I_GENERATOR_CALLBACK():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  SIGNATURE_LENGTH(): BigInt {
    let result = super.call(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_SIGNATURE_LENGTH(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "SIGNATURE_LENGTH",
      "SIGNATURE_LENGTH():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  SLASH_RESULT_MASK(): Bytes {
    let result = super.call(
      "SLASH_RESULT_MASK",
      "SLASH_RESULT_MASK():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SLASH_RESULT_MASK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SLASH_RESULT_MASK",
      "SLASH_RESULT_MASK():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SLASH_RESULT_TYPE(): Bytes {
    let result = super.call(
      "SLASH_RESULT_TYPE",
      "SLASH_RESULT_TYPE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_SLASH_RESULT_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SLASH_RESULT_TYPE",
      "SLASH_RESULT_TYPE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STAKE_SNAPSHOT_MASK(): Bytes {
    let result = super.call(
      "STAKE_SNAPSHOT_MASK",
      "STAKE_SNAPSHOT_MASK():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_STAKE_SNAPSHOT_MASK(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKE_SNAPSHOT_MASK",
      "STAKE_SNAPSHOT_MASK():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  STAKE_SNAPSHOT_TYPE(): Bytes {
    let result = super.call(
      "STAKE_SNAPSHOT_TYPE",
      "STAKE_SNAPSHOT_TYPE():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_STAKE_SNAPSHOT_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "STAKE_SNAPSHOT_TYPE",
      "STAKE_SNAPSHOT_TYPE():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  amountToLock(stakeToken: Address): BigInt {
    let result = super.call("amountToLock", "amountToLock(address):(uint256)", [
      ethereum.Value.fromAddress(stakeToken),
    ]);

    return result[0].toBigInt();
  }

  try_amountToLock(stakeToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "amountToLock",
      "amountToLock(address):(uint256)",
      [ethereum.Value.fromAddress(stakeToken)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  attestationVerifier(): Address {
    let result = super.call(
      "attestationVerifier",
      "attestationVerifier():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_attestationVerifier(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "attestationVerifier",
      "attestationVerifier():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseTransmitterComissionRate(): BigInt {
    let result = super.call(
      "baseTransmitterComissionRate",
      "baseTransmitterComissionRate():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_baseTransmitterComissionRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "baseTransmitterComissionRate",
      "baseTransmitterComissionRate():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  confirmedTimestampInfo(
    _idx: BigInt,
  ): SymbioticStaking__confirmedTimestampInfoResultValue0Struct {
    let result = super.call(
      "confirmedTimestampInfo",
      "confirmedTimestampInfo(uint256):((uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_idx)],
    );

    return changetype<SymbioticStaking__confirmedTimestampInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_confirmedTimestampInfo(
    _idx: BigInt,
  ): ethereum.CallResult<SymbioticStaking__confirmedTimestampInfoResultValue0Struct> {
    let result = super.tryCall(
      "confirmedTimestampInfo",
      "confirmedTimestampInfo(uint256):((uint256,address,uint256))",
      [ethereum.Value.fromUnsignedBigInt(_idx)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbioticStaking__confirmedTimestampInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  confirmedTimestamps(
    param0: BigInt,
  ): SymbioticStaking__confirmedTimestampsResult {
    let result = super.call(
      "confirmedTimestamps",
      "confirmedTimestamps(uint256):(uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );

    return new SymbioticStaking__confirmedTimestampsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBigInt(),
    );
  }

  try_confirmedTimestamps(
    param0: BigInt,
  ): ethereum.CallResult<SymbioticStaking__confirmedTimestampsResult> {
    let result = super.tryCall(
      "confirmedTimestamps",
      "confirmedTimestamps(uint256):(uint256,address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SymbioticStaking__confirmedTimestampsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBigInt(),
      ),
    );
  }

  enclaveImages(imageId: Bytes): SymbioticStaking__enclaveImagesResult {
    let result = super.call(
      "enclaveImages",
      "enclaveImages(bytes32):(bytes,bytes,bytes)",
      [ethereum.Value.fromFixedBytes(imageId)],
    );

    return new SymbioticStaking__enclaveImagesResult(
      result[0].toBytes(),
      result[1].toBytes(),
      result[2].toBytes(),
    );
  }

  try_enclaveImages(
    imageId: Bytes,
  ): ethereum.CallResult<SymbioticStaking__enclaveImagesResult> {
    let result = super.tryCall(
      "enclaveImages",
      "enclaveImages(bytes32):(bytes,bytes,bytes)",
      [ethereum.Value.fromFixedBytes(imageId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SymbioticStaking__enclaveImagesResult(
        value[0].toBytes(),
        value[1].toBytes(),
        value[2].toBytes(),
      ),
    );
  }

  feeRewardToken(): Address {
    let result = super.call("feeRewardToken", "feeRewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_feeRewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "feeRewardToken",
      "feeRewardToken():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getImageId(PCR0: Bytes, PCR1: Bytes, PCR2: Bytes): Bytes {
    let result = super.call(
      "getImageId",
      "getImageId(bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromBytes(PCR0),
        ethereum.Value.fromBytes(PCR1),
        ethereum.Value.fromBytes(PCR2),
      ],
    );

    return result[0].toBytes();
  }

  try_getImageId(
    PCR0: Bytes,
    PCR1: Bytes,
    PCR2: Bytes,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getImageId",
      "getImageId(bytes,bytes,bytes):(bytes32)",
      [
        ethereum.Value.fromBytes(PCR0),
        ethereum.Value.fromBytes(PCR1),
        ethereum.Value.fromBytes(PCR2),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getOperatorActiveStakeAmount(
    _stakeToken: Address,
    _operator: Address,
  ): BigInt {
    let result = super.call(
      "getOperatorActiveStakeAmount",
      "getOperatorActiveStakeAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );

    return result[0].toBigInt();
  }

  try_getOperatorActiveStakeAmount(
    _stakeToken: Address,
    _operator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorActiveStakeAmount",
      "getOperatorActiveStakeAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOperatorStakeAmount(_stakeToken: Address, _operator: Address): BigInt {
    let result = super.call(
      "getOperatorStakeAmount",
      "getOperatorStakeAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );

    return result[0].toBigInt();
  }

  try_getOperatorStakeAmount(
    _stakeToken: Address,
    _operator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorStakeAmount",
      "getOperatorStakeAmount(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOperatorStakeAmountAt(
    _captureTimestamp: BigInt,
    _stakeToken: Address,
    _operator: Address,
  ): BigInt {
    let result = super.call(
      "getOperatorStakeAmountAt",
      "getOperatorStakeAmountAt(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_captureTimestamp),
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );

    return result[0].toBigInt();
  }

  try_getOperatorStakeAmountAt(
    _captureTimestamp: BigInt,
    _stakeToken: Address,
    _operator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getOperatorStakeAmountAt",
      "getOperatorStakeAmountAt(uint256,address,address):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_captureTimestamp),
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role),
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStakeAmount(
    _stakeToken: Address,
    _vault: Address,
    _operator: Address,
  ): BigInt {
    let result = super.call(
      "getStakeAmount",
      "getStakeAmount(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_operator),
      ],
    );

    return result[0].toBigInt();
  }

  try_getStakeAmount(
    _stakeToken: Address,
    _vault: Address,
    _operator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getStakeAmount",
      "getStakeAmount(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(_stakeToken),
        ethereum.Value.fromAddress(_vault),
        ethereum.Value.fromAddress(_operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getStakeTokenList(): Array<Address> {
    let result = super.call(
      "getStakeTokenList",
      "getStakeTokenList():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getStakeTokenList(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getStakeTokenList",
      "getStakeTokenList():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getStakeTokenWeights(): SymbioticStaking__getStakeTokenWeightsResult {
    let result = super.call(
      "getStakeTokenWeights",
      "getStakeTokenWeights():(address[],uint256[])",
      [],
    );

    return new SymbioticStaking__getStakeTokenWeightsResult(
      result[0].toAddressArray(),
      result[1].toBigIntArray(),
    );
  }

  try_getStakeTokenWeights(): ethereum.CallResult<SymbioticStaking__getStakeTokenWeightsResult> {
    let result = super.tryCall(
      "getStakeTokenWeights",
      "getStakeTokenWeights():(address[],uint256[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SymbioticStaking__getStakeTokenWeightsResult(
        value[0].toAddressArray(),
        value[1].toBigIntArray(),
      ),
    );
  }

  getSubmissionStatus(_captureTimestamp: BigInt, _transmitter: Address): Bytes {
    let result = super.call(
      "getSubmissionStatus",
      "getSubmissionStatus(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_captureTimestamp),
        ethereum.Value.fromAddress(_transmitter),
      ],
    );

    return result[0].toBytes();
  }

  try_getSubmissionStatus(
    _captureTimestamp: BigInt,
    _transmitter: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getSubmissionStatus",
      "getSubmissionStatus(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(_captureTimestamp),
        ethereum.Value.fromAddress(_transmitter),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isSupportedStakeToken(_stakeToken: Address): boolean {
    let result = super.call(
      "isSupportedStakeToken",
      "isSupportedStakeToken(address):(bool)",
      [ethereum.Value.fromAddress(_stakeToken)],
    );

    return result[0].toBoolean();
  }

  try_isSupportedStakeToken(
    _stakeToken: Address,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSupportedStakeToken",
      "isSupportedStakeToken(address):(bool)",
      [ethereum.Value.fromAddress(_stakeToken)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  latestConfirmedTimestamp(): BigInt {
    let result = super.call(
      "latestConfirmedTimestamp",
      "latestConfirmedTimestamp():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestConfirmedTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestConfirmedTimestamp",
      "latestConfirmedTimestamp():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestConfirmedTimestampIdx(): BigInt {
    let result = super.call(
      "latestConfirmedTimestampIdx",
      "latestConfirmedTimestampIdx():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_latestConfirmedTimestampIdx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestConfirmedTimestampIdx",
      "latestConfirmedTimestampIdx():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  latestConfirmedTimestampInfo(): SymbioticStaking__latestConfirmedTimestampInfoResultValue0Struct {
    let result = super.call(
      "latestConfirmedTimestampInfo",
      "latestConfirmedTimestampInfo():((uint256,address,uint256))",
      [],
    );

    return changetype<SymbioticStaking__latestConfirmedTimestampInfoResultValue0Struct>(
      result[0].toTuple(),
    );
  }

  try_latestConfirmedTimestampInfo(): ethereum.CallResult<SymbioticStaking__latestConfirmedTimestampInfoResultValue0Struct> {
    let result = super.tryCall(
      "latestConfirmedTimestampInfo",
      "latestConfirmedTimestampInfo():((uint256,address,uint256))",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<SymbioticStaking__latestConfirmedTimestampInfoResultValue0Struct>(
        value[0].toTuple(),
      ),
    );
  }

  lockInfo(jobId: BigInt): SymbioticStaking__lockInfoResult {
    let result = super.call("lockInfo", "lockInfo(uint256):(address,uint256)", [
      ethereum.Value.fromUnsignedBigInt(jobId),
    ]);

    return new SymbioticStaking__lockInfoResult(
      result[0].toAddress(),
      result[1].toBigInt(),
    );
  }

  try_lockInfo(
    jobId: BigInt,
  ): ethereum.CallResult<SymbioticStaking__lockInfoResult> {
    let result = super.tryCall(
      "lockInfo",
      "lockInfo(uint256):(address,uint256)",
      [ethereum.Value.fromUnsignedBigInt(jobId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SymbioticStaking__lockInfoResult(
        value[0].toAddress(),
        value[1].toBigInt(),
      ),
    );
  }

  operatorLockedAmounts(stakeToken: Address, operator: Address): BigInt {
    let result = super.call(
      "operatorLockedAmounts",
      "operatorLockedAmounts(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(operator),
      ],
    );

    return result[0].toBigInt();
  }

  try_operatorLockedAmounts(
    stakeToken: Address,
    operator: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "operatorLockedAmounts",
      "operatorLockedAmounts(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(stakeToken),
        ethereum.Value.fromAddress(operator),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  proofMarketplace(): Address {
    let result = super.call(
      "proofMarketplace",
      "proofMarketplace():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_proofMarketplace(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "proofMarketplace",
      "proofMarketplace():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  registeredTransmitters(captureTimestamp: BigInt): Address {
    let result = super.call(
      "registeredTransmitters",
      "registeredTransmitters(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(captureTimestamp)],
    );

    return result[0].toAddress();
  }

  try_registeredTransmitters(
    captureTimestamp: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "registeredTransmitters",
      "registeredTransmitters(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(captureTimestamp)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardDistributor(): Address {
    let result = super.call(
      "rewardDistributor",
      "rewardDistributor():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_rewardDistributor(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardDistributor",
      "rewardDistributor():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakeTokenSelectionWeight(stakeToken: Address): BigInt {
    let result = super.call(
      "stakeTokenSelectionWeight",
      "stakeTokenSelectionWeight(address):(uint256)",
      [ethereum.Value.fromAddress(stakeToken)],
    );

    return result[0].toBigInt();
  }

  try_stakeTokenSelectionWeight(
    stakeToken: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeTokenSelectionWeight",
      "stakeTokenSelectionWeight(address):(uint256)",
      [ethereum.Value.fromAddress(stakeToken)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeTokenSelectionWeightSum(): BigInt {
    let result = super.call(
      "stakeTokenSelectionWeightSum",
      "stakeTokenSelectionWeightSum():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_stakeTokenSelectionWeightSum(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "stakeTokenSelectionWeightSum",
      "stakeTokenSelectionWeightSum():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakingManager(): Address {
    let result = super.call("stakingManager", "stakingManager():(address)", []);

    return result[0].toAddress();
  }

  try_stakingManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingManager",
      "stakingManager():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  submissionCooldown(): BigInt {
    let result = super.call(
      "submissionCooldown",
      "submissionCooldown():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_submissionCooldown(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "submissionCooldown",
      "submissionCooldown():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  submissionStatus(captureTimestamp: BigInt, account: Address): Bytes {
    let result = super.call(
      "submissionStatus",
      "submissionStatus(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(captureTimestamp),
        ethereum.Value.fromAddress(account),
      ],
    );

    return result[0].toBytes();
  }

  try_submissionStatus(
    captureTimestamp: BigInt,
    account: Address,
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "submissionStatus",
      "submissionStatus(uint256,address):(bytes32)",
      [
        ethereum.Value.fromUnsignedBigInt(captureTimestamp),
        ethereum.Value.fromAddress(account),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  txCountInfo(
    captureTimestamp: BigInt,
    submissionType: Bytes,
  ): SymbioticStaking__txCountInfoResult {
    let result = super.call(
      "txCountInfo",
      "txCountInfo(uint256,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(captureTimestamp),
        ethereum.Value.fromFixedBytes(submissionType),
      ],
    );

    return new SymbioticStaking__txCountInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
    );
  }

  try_txCountInfo(
    captureTimestamp: BigInt,
    submissionType: Bytes,
  ): ethereum.CallResult<SymbioticStaking__txCountInfoResult> {
    let result = super.tryCall(
      "txCountInfo",
      "txCountInfo(uint256,bytes32):(uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(captureTimestamp),
        ethereum.Value.fromFixedBytes(submissionType),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SymbioticStaking__txCountInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
      ),
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _generator_callback(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddEnclaveImageCall extends ethereum.Call {
  get inputs(): AddEnclaveImageCall__Inputs {
    return new AddEnclaveImageCall__Inputs(this);
  }

  get outputs(): AddEnclaveImageCall__Outputs {
    return new AddEnclaveImageCall__Outputs(this);
  }
}

export class AddEnclaveImageCall__Inputs {
  _call: AddEnclaveImageCall;

  constructor(call: AddEnclaveImageCall) {
    this._call = call;
  }

  get PCRs(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class AddEnclaveImageCall__Outputs {
  _call: AddEnclaveImageCall;

  constructor(call: AddEnclaveImageCall) {
    this._call = call;
  }
}

export class AddEnclaveImage1Call extends ethereum.Call {
  get inputs(): AddEnclaveImage1Call__Inputs {
    return new AddEnclaveImage1Call__Inputs(this);
  }

  get outputs(): AddEnclaveImage1Call__Outputs {
    return new AddEnclaveImage1Call__Outputs(this);
  }
}

export class AddEnclaveImage1Call__Inputs {
  _call: AddEnclaveImage1Call;

  constructor(call: AddEnclaveImage1Call) {
    this._call = call;
  }

  get PCR0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get PCR1(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get PCR2(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class AddEnclaveImage1Call__Outputs {
  _call: AddEnclaveImage1Call;

  constructor(call: AddEnclaveImage1Call) {
    this._call = call;
  }
}

export class AddStakeTokenCall extends ethereum.Call {
  get inputs(): AddStakeTokenCall__Inputs {
    return new AddStakeTokenCall__Inputs(this);
  }

  get outputs(): AddStakeTokenCall__Outputs {
    return new AddStakeTokenCall__Outputs(this);
  }
}

export class AddStakeTokenCall__Inputs {
  _call: AddStakeTokenCall;

  constructor(call: AddStakeTokenCall) {
    this._call = call;
  }

  get _stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddStakeTokenCall__Outputs {
  _call: AddStakeTokenCall;

  constructor(call: AddStakeTokenCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _admin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _attestationVerifier(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _proofMarketplace(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingManager(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _rewardDistributor(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _feeRewardToken(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LockStakeCall extends ethereum.Call {
  get inputs(): LockStakeCall__Inputs {
    return new LockStakeCall__Inputs(this);
  }

  get outputs(): LockStakeCall__Outputs {
    return new LockStakeCall__Outputs(this);
  }
}

export class LockStakeCall__Inputs {
  _call: LockStakeCall;

  constructor(call: LockStakeCall) {
    this._call = call;
  }

  get _jobId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LockStakeCall__Outputs {
  _call: LockStakeCall;

  constructor(call: LockStakeCall) {
    this._call = call;
  }
}

export class OnJobCompletionCall extends ethereum.Call {
  get inputs(): OnJobCompletionCall__Inputs {
    return new OnJobCompletionCall__Inputs(this);
  }

  get outputs(): OnJobCompletionCall__Outputs {
    return new OnJobCompletionCall__Outputs(this);
  }
}

export class OnJobCompletionCall__Inputs {
  _call: OnJobCompletionCall;

  constructor(call: OnJobCompletionCall) {
    this._call = call;
  }

  get _jobId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _operator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _feeRewardAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class OnJobCompletionCall__Outputs {
  _call: OnJobCompletionCall;

  constructor(call: OnJobCompletionCall) {
    this._call = call;
  }
}

export class RemoveEnclaveImageCall extends ethereum.Call {
  get inputs(): RemoveEnclaveImageCall__Inputs {
    return new RemoveEnclaveImageCall__Inputs(this);
  }

  get outputs(): RemoveEnclaveImageCall__Outputs {
    return new RemoveEnclaveImageCall__Outputs(this);
  }
}

export class RemoveEnclaveImageCall__Inputs {
  _call: RemoveEnclaveImageCall;

  constructor(call: RemoveEnclaveImageCall) {
    this._call = call;
  }

  get _imageId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class RemoveEnclaveImageCall__Outputs {
  _call: RemoveEnclaveImageCall;

  constructor(call: RemoveEnclaveImageCall) {
    this._call = call;
  }
}

export class RemoveStakeTokenCall extends ethereum.Call {
  get inputs(): RemoveStakeTokenCall__Inputs {
    return new RemoveStakeTokenCall__Inputs(this);
  }

  get outputs(): RemoveStakeTokenCall__Outputs {
    return new RemoveStakeTokenCall__Outputs(this);
  }
}

export class RemoveStakeTokenCall__Inputs {
  _call: RemoveStakeTokenCall;

  constructor(call: RemoveStakeTokenCall) {
    this._call = call;
  }

  get _stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStakeTokenCall__Outputs {
  _call: RemoveStakeTokenCall;

  constructor(call: RemoveStakeTokenCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get callerConfirmation(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetAmountToLockCall extends ethereum.Call {
  get inputs(): SetAmountToLockCall__Inputs {
    return new SetAmountToLockCall__Inputs(this);
  }

  get outputs(): SetAmountToLockCall__Outputs {
    return new SetAmountToLockCall__Outputs(this);
  }
}

export class SetAmountToLockCall__Inputs {
  _call: SetAmountToLockCall;

  constructor(call: SetAmountToLockCall) {
    this._call = call;
  }

  get _stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetAmountToLockCall__Outputs {
  _call: SetAmountToLockCall;

  constructor(call: SetAmountToLockCall) {
    this._call = call;
  }
}

export class SetAttestationVerifierCall extends ethereum.Call {
  get inputs(): SetAttestationVerifierCall__Inputs {
    return new SetAttestationVerifierCall__Inputs(this);
  }

  get outputs(): SetAttestationVerifierCall__Outputs {
    return new SetAttestationVerifierCall__Outputs(this);
  }
}

export class SetAttestationVerifierCall__Inputs {
  _call: SetAttestationVerifierCall;

  constructor(call: SetAttestationVerifierCall) {
    this._call = call;
  }

  get _attestationVerifier(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAttestationVerifierCall__Outputs {
  _call: SetAttestationVerifierCall;

  constructor(call: SetAttestationVerifierCall) {
    this._call = call;
  }
}

export class SetBaseTransmitterComissionRateCall extends ethereum.Call {
  get inputs(): SetBaseTransmitterComissionRateCall__Inputs {
    return new SetBaseTransmitterComissionRateCall__Inputs(this);
  }

  get outputs(): SetBaseTransmitterComissionRateCall__Outputs {
    return new SetBaseTransmitterComissionRateCall__Outputs(this);
  }
}

export class SetBaseTransmitterComissionRateCall__Inputs {
  _call: SetBaseTransmitterComissionRateCall;

  constructor(call: SetBaseTransmitterComissionRateCall) {
    this._call = call;
  }

  get _baseTransmitterComission(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseTransmitterComissionRateCall__Outputs {
  _call: SetBaseTransmitterComissionRateCall;

  constructor(call: SetBaseTransmitterComissionRateCall) {
    this._call = call;
  }
}

export class SetFeeRewardTokenCall extends ethereum.Call {
  get inputs(): SetFeeRewardTokenCall__Inputs {
    return new SetFeeRewardTokenCall__Inputs(this);
  }

  get outputs(): SetFeeRewardTokenCall__Outputs {
    return new SetFeeRewardTokenCall__Outputs(this);
  }
}

export class SetFeeRewardTokenCall__Inputs {
  _call: SetFeeRewardTokenCall;

  constructor(call: SetFeeRewardTokenCall) {
    this._call = call;
  }

  get _feeRewardToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRewardTokenCall__Outputs {
  _call: SetFeeRewardTokenCall;

  constructor(call: SetFeeRewardTokenCall) {
    this._call = call;
  }
}

export class SetJobManagerCall extends ethereum.Call {
  get inputs(): SetJobManagerCall__Inputs {
    return new SetJobManagerCall__Inputs(this);
  }

  get outputs(): SetJobManagerCall__Outputs {
    return new SetJobManagerCall__Outputs(this);
  }
}

export class SetJobManagerCall__Inputs {
  _call: SetJobManagerCall;

  constructor(call: SetJobManagerCall) {
    this._call = call;
  }

  get _jobManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetJobManagerCall__Outputs {
  _call: SetJobManagerCall;

  constructor(call: SetJobManagerCall) {
    this._call = call;
  }
}

export class SetRewardDistributorCall extends ethereum.Call {
  get inputs(): SetRewardDistributorCall__Inputs {
    return new SetRewardDistributorCall__Inputs(this);
  }

  get outputs(): SetRewardDistributorCall__Outputs {
    return new SetRewardDistributorCall__Outputs(this);
  }
}

export class SetRewardDistributorCall__Inputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }

  get _rewardDistributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetRewardDistributorCall__Outputs {
  _call: SetRewardDistributorCall;

  constructor(call: SetRewardDistributorCall) {
    this._call = call;
  }
}

export class SetStakeTokenSelectionWeightCall extends ethereum.Call {
  get inputs(): SetStakeTokenSelectionWeightCall__Inputs {
    return new SetStakeTokenSelectionWeightCall__Inputs(this);
  }

  get outputs(): SetStakeTokenSelectionWeightCall__Outputs {
    return new SetStakeTokenSelectionWeightCall__Outputs(this);
  }
}

export class SetStakeTokenSelectionWeightCall__Inputs {
  _call: SetStakeTokenSelectionWeightCall;

  constructor(call: SetStakeTokenSelectionWeightCall) {
    this._call = call;
  }

  get _stakeToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _weight(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetStakeTokenSelectionWeightCall__Outputs {
  _call: SetStakeTokenSelectionWeightCall;

  constructor(call: SetStakeTokenSelectionWeightCall) {
    this._call = call;
  }
}

export class SetStakingManagerCall extends ethereum.Call {
  get inputs(): SetStakingManagerCall__Inputs {
    return new SetStakingManagerCall__Inputs(this);
  }

  get outputs(): SetStakingManagerCall__Outputs {
    return new SetStakingManagerCall__Outputs(this);
  }
}

export class SetStakingManagerCall__Inputs {
  _call: SetStakingManagerCall;

  constructor(call: SetStakingManagerCall) {
    this._call = call;
  }

  get _stakingManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetStakingManagerCall__Outputs {
  _call: SetStakingManagerCall;

  constructor(call: SetStakingManagerCall) {
    this._call = call;
  }
}

export class SetSubmissionCooldownCall extends ethereum.Call {
  get inputs(): SetSubmissionCooldownCall__Inputs {
    return new SetSubmissionCooldownCall__Inputs(this);
  }

  get outputs(): SetSubmissionCooldownCall__Outputs {
    return new SetSubmissionCooldownCall__Outputs(this);
  }
}

export class SetSubmissionCooldownCall__Inputs {
  _call: SetSubmissionCooldownCall;

  constructor(call: SetSubmissionCooldownCall) {
    this._call = call;
  }

  get _submissionCooldown(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetSubmissionCooldownCall__Outputs {
  _call: SetSubmissionCooldownCall;

  constructor(call: SetSubmissionCooldownCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get _slashedJobs(): Array<SlashCall_slashedJobsStruct> {
    return this._call.inputValues[0].value.toTupleArray<SlashCall_slashedJobsStruct>();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class SlashCall_slashedJobsStruct extends ethereum.Tuple {
  get jobId(): BigInt {
    return this[0].toBigInt();
  }

  get operator(): Address {
    return this[1].toAddress();
  }

  get rewardAddress(): Address {
    return this[2].toAddress();
  }
}

export class SubmitSlashResultCall extends ethereum.Call {
  get inputs(): SubmitSlashResultCall__Inputs {
    return new SubmitSlashResultCall__Inputs(this);
  }

  get outputs(): SubmitSlashResultCall__Outputs {
    return new SubmitSlashResultCall__Outputs(this);
  }
}

export class SubmitSlashResultCall__Inputs {
  _call: SubmitSlashResultCall;

  constructor(call: SubmitSlashResultCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _numOfTxs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _captureTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _imageId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _slashResultData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SubmitSlashResultCall__Outputs {
  _call: SubmitSlashResultCall;

  constructor(call: SubmitSlashResultCall) {
    this._call = call;
  }
}

export class SubmitVaultSnapshotCall extends ethereum.Call {
  get inputs(): SubmitVaultSnapshotCall__Inputs {
    return new SubmitVaultSnapshotCall__Inputs(this);
  }

  get outputs(): SubmitVaultSnapshotCall__Outputs {
    return new SubmitVaultSnapshotCall__Outputs(this);
  }
}

export class SubmitVaultSnapshotCall__Inputs {
  _call: SubmitVaultSnapshotCall;

  constructor(call: SubmitVaultSnapshotCall) {
    this._call = call;
  }

  get _index(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _numOfTxs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _captureTimestamp(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _imageId(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get _vaultSnapshotData(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get _proof(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class SubmitVaultSnapshotCall__Outputs {
  _call: SubmitVaultSnapshotCall;

  constructor(call: SubmitVaultSnapshotCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
