// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class GlobalState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save GlobalState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type GlobalState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("GlobalState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): GlobalState | null {
    return changetype<GlobalState | null>(
      store.get_in_block("GlobalState", id),
    );
  }

  static load(id: string): GlobalState | null {
    return changetype<GlobalState | null>(store.get("GlobalState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get pointsPerEpoch(): BigInt {
    let value = this.get("pointsPerEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pointsPerEpoch(value: BigInt) {
    this.set("pointsPerEpoch", Value.fromBigInt(value));
  }

  get startTime(): BigInt {
    let value = this.get("startTime");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set startTime(value: BigInt) {
    this.set("startTime", Value.fromBigInt(value));
  }

  get epochLength(): BigInt {
    let value = this.get("epochLength");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epochLength(value: BigInt) {
    this.set("epochLength", Value.fromBigInt(value));
  }

  get pointsDistributedTillEpoch(): BigInt {
    let value = this.get("pointsDistributedTillEpoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set pointsDistributedTillEpoch(value: BigInt) {
    this.set("pointsDistributedTillEpoch", Value.fromBigInt(value));
  }

  get jobsByEpoch(): TotalJobsPerEpochLoader {
    return new TotalJobsPerEpochLoader(
      "GlobalState",
      this.get("id")!.toString(),
      "jobsByEpoch",
    );
  }

  get generators(): Array<string> {
    let value = this.get("generators");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set generators(value: Array<string>) {
    this.set("generators", Value.fromStringArray(value));
  }

  get confirmedSnapshots(): Array<string> {
    let value = this.get("confirmedSnapshots");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set confirmedSnapshots(value: Array<string>) {
    this.set("confirmedSnapshots", Value.fromStringArray(value));
  }
}

export class Snapshot extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Snapshot entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Snapshot must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Snapshot", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Snapshot | null {
    return changetype<Snapshot | null>(store.get_in_block("Snapshot", id));
  }

  static load(id: string): Snapshot | null {
    return changetype<Snapshot | null>(store.get("Snapshot", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get confirmedAt(): BigInt | null {
    let value = this.get("confirmedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set confirmedAt(value: BigInt | null) {
    if (!value) {
      this.unset("confirmedAt");
    } else {
      this.set("confirmedAt", Value.fromBigInt(<BigInt>value));
    }
  }

  get transmitter(): string {
    let value = this.get("transmitter");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set transmitter(value: string) {
    this.set("transmitter", Value.fromString(value));
  }

  get snapshotTs(): BigInt {
    let value = this.get("snapshotTs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set snapshotTs(value: BigInt) {
    this.set("snapshotTs", Value.fromBigInt(value));
  }

  get delegations(): DelegationLoader {
    return new DelegationLoader(
      "Snapshot",
      this.get("id")!.toString(),
      "delegations",
    );
  }

  get totalDelegations(): TotalDelegationLoader {
    return new TotalDelegationLoader(
      "Snapshot",
      this.get("id")!.toString(),
      "totalDelegations",
    );
  }
}

export class EpochState extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save EpochState entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type EpochState must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("EpochState", id.toString(), this);
    }
  }

  static loadInBlock(id: string): EpochState | null {
    return changetype<EpochState | null>(store.get_in_block("EpochState", id));
  }

  static load(id: string): EpochState | null {
    return changetype<EpochState | null>(store.get("EpochState", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenList(): Array<string> {
    let value = this.get("tokenList");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set tokenList(value: Array<string>) {
    this.set("tokenList", Value.fromStringArray(value));
  }
}

export class Delegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Delegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Delegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Delegation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get_in_block("Delegation", id));
  }

  static load(id: string): Delegation | null {
    return changetype<Delegation | null>(store.get("Delegation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get generator(): string {
    let value = this.get("generator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set generator(value: string) {
    this.set("generator", Value.fromString(value));
  }

  get delegator(): string {
    let value = this.get("delegator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set delegator(value: string) {
    this.set("delegator", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get snapshot(): string {
    let value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set snapshot(value: string) {
    this.set("snapshot", Value.fromString(value));
  }
}

export class TotalDelegation extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalDelegation entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalDelegation must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TotalDelegation", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TotalDelegation | null {
    return changetype<TotalDelegation | null>(
      store.get_in_block("TotalDelegation", id),
    );
  }

  static load(id: string): TotalDelegation | null {
    return changetype<TotalDelegation | null>(store.get("TotalDelegation", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get generator(): string {
    let value = this.get("generator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set generator(value: string) {
    this.set("generator", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get snapshot(): string {
    let value = this.get("snapshot");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set snapshot(value: string) {
    this.set("snapshot", Value.fromString(value));
  }
}

export class Generator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Generator entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Generator must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Generator", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Generator | null {
    return changetype<Generator | null>(store.get_in_block("Generator", id));
  }

  static load(id: string): Generator | null {
    return changetype<Generator | null>(store.get("Generator", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get commission(): BigInt {
    let value = this.get("commission");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set commission(value: BigInt) {
    this.set("commission", Value.fromBigInt(value));
  }

  get tasks(): TaskLoader {
    return new TaskLoader("Generator", this.get("id")!.toString(), "tasks");
  }

  get jobsByEpoch(): JobsPerEpochLoader {
    return new JobsPerEpochLoader(
      "Generator",
      this.get("id")!.toString(),
      "jobsByEpoch",
    );
  }

  get delegations(): Array<string> {
    let value = this.get("delegations");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set delegations(value: Array<string>) {
    this.set("delegations", Value.fromStringArray(value));
  }

  get totalDelegation(): Array<string> {
    let value = this.get("totalDelegation");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set totalDelegation(value: Array<string>) {
    this.set("totalDelegation", Value.fromStringArray(value));
  }
}

export class Task extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Task entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Task must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Task", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Task | null {
    return changetype<Task | null>(store.get_in_block("Task", id));
  }

  static load(id: string): Task | null {
    return changetype<Task | null>(store.get("Task", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get generator(): string {
    let value = this.get("generator");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set generator(value: string) {
    this.set("generator", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get assignedAt(): BigInt {
    let value = this.get("assignedAt");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set assignedAt(value: BigInt) {
    this.set("assignedAt", Value.fromBigInt(value));
  }

  get completedAt(): BigInt | null {
    let value = this.get("completedAt");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set completedAt(value: BigInt | null) {
    if (!value) {
      this.unset("completedAt");
    } else {
      this.set("completedAt", Value.fromBigInt(<BigInt>value));
    }
  }
}

export class JobsPerEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save JobsPerEpoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type JobsPerEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("JobsPerEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): JobsPerEpoch | null {
    return changetype<JobsPerEpoch | null>(
      store.get_in_block("JobsPerEpoch", id),
    );
  }

  static load(id: string): JobsPerEpoch | null {
    return changetype<JobsPerEpoch | null>(store.get("JobsPerEpoch", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get token(): string {
    let value = this.get("token");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set token(value: string) {
    this.set("token", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get jobCount(): BigInt {
    let value = this.get("jobCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set jobCount(value: BigInt) {
    this.set("jobCount", Value.fromBigInt(value));
  }

  get jobs(): Array<string> {
    let value = this.get("jobs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set jobs(value: Array<string>) {
    this.set("jobs", Value.fromStringArray(value));
  }
}

export class TotalJobsPerEpoch extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TotalJobsPerEpoch entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TotalJobsPerEpoch must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("TotalJobsPerEpoch", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TotalJobsPerEpoch | null {
    return changetype<TotalJobsPerEpoch | null>(
      store.get_in_block("TotalJobsPerEpoch", id),
    );
  }

  static load(id: string): TotalJobsPerEpoch | null {
    return changetype<TotalJobsPerEpoch | null>(
      store.get("TotalJobsPerEpoch", id),
    );
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get index(): string {
    let value = this.get("index");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set index(value: string) {
    this.set("index", Value.fromString(value));
  }

  get epoch(): BigInt {
    let value = this.get("epoch");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set epoch(value: BigInt) {
    this.set("epoch", Value.fromBigInt(value));
  }

  get jobCount(): BigInt {
    let value = this.get("jobCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set jobCount(value: BigInt) {
    this.set("jobCount", Value.fromBigInt(value));
  }

  get jobs(): Array<string> {
    let value = this.get("jobs");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toStringArray();
    }
  }

  set jobs(value: Array<string>) {
    this.set("jobs", Value.fromStringArray(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): string {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set address(value: string) {
    this.set("address", Value.fromString(value));
  }

  get points(): BigInt {
    let value = this.get("points");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set points(value: BigInt) {
    this.set("points", Value.fromBigInt(value));
  }
}

export class TotalJobsPerEpochLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TotalJobsPerEpoch[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TotalJobsPerEpoch[]>(value);
  }
}

export class DelegationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Delegation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Delegation[]>(value);
  }
}

export class TotalDelegationLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TotalDelegation[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TotalDelegation[]>(value);
  }
}

export class TaskLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Task[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Task[]>(value);
  }
}

export class JobsPerEpochLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): JobsPerEpoch[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<JobsPerEpoch[]>(value);
  }
}
